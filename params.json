{
  "name": "Chess py",
  "tagline": "Chess library for simple chess engine creation",
  "body": "# chess_py\r\n\r\n[![Build Status](https://travis-ci.org/LordDarkula/chess_py.svg?branch=master)](https://travis-ci.org/LordDarkula/chess_py)\r\n[![Code Climate](https://codeclimate.com/github/LordDarkula/chess_py/badges/gpa.svg)](https://codeclimate.com/github/LordDarkula/chess_py)\r\n[![PyPI version](https://badge.fury.io/py/chess_py.svg)](https://pypi.python.org/pypi/chess_py)\r\n[![Python27](https://img.shields.io/badge/python-2.7-blue.svg)](https://www.python.org/download/releases/2.7/)\r\n[![Python35](https://img.shields.io/badge/python-3.5-blue.svg)](https://www.python.org/downloads/release/python-350/)\r\n[![License](https://img.shields.io/cocoapods/l/EasyQL.svg?style=flat)](https://github.com/LordDarkula/chess_py/blob/master/LICENSE)\r\n[![Twitter](https://img.shields.io/badge/twitter-@LordDarkula-blue.svg?style=flat)](http://twitter.com/LordDarkula)\r\n```\r\n\r\n8 ║♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜\r\n7 ║♟ ♟ ♟ ♟ ♟ ♟ ♟ ♟\r\n6 ║… … … … … … … …\r\n5 ║… … … … … … … …\r\n4 ║… … … … … … … …\r\n3 ║… … … … … … … …\r\n2 ║♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙\r\n1 ║♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖\r\n--╚═══════════════\r\n——-a b c d e f g h\r\n```\r\n\r\n## License\r\nchess_py is available under the MIT license. See the LICENSE file for more info.\r\nCopyright © 2016 Aubhro Sengupta. All rights reserved.\r\n\r\n## Introduction\r\n\r\nChess_py is an open source chess client and framework written in python. Can create chess matches and provide players with data regarding current position, possible moves and eventual result of the game. UCI integration in progress.\r\n\r\n## Installation\r\n\r\nTo use as a immediately start up a game between two human players in the console, navigate inside the root directory of the package and run main.py. \r\n\r\n```bash\r\npython main.py\r\n```\r\n\r\nTo install package  \r\n\r\n### ``pip`` (*Recommended*)\r\n```bash\r\npip install chess_py\r\n```\r\n\r\n### Or manually\r\n```bash\r\npython setup.py install\r\n```\r\n## Documentation\r\n\r\nView complete technical documentation [here](http://lorddarkula.github.io/chess_py/html/html/index.html).\r\n\r\n## Great! How do you use it? (*An Example*)\r\n\r\nChess_py has the capability of creating games between players, either human, or AI \r\n\r\n```python\r\nimport chess_py\r\nfrom chess_py import Game, Human, color\r\n\r\n\"\"\" Creates a Game with 2 humans. \r\nWhen run, this will open the console,\"\"\"\r\nnew_game = Game(Human(color.white), Human(color.black))\r\n\r\n\"\"\" After game is completed, outcome will be stored in result.\r\nThe integer result will be one of three values. \r\nwhite wins - 0, black wins - 1, draw - 0.5 \"\"\"\r\nresult = new_game.play()\r\n```\r\n\r\nTo build a chess engine on with chess_py, inherit Player and implement generate_move() \r\n\r\n```python\r\nimport chess_py\r\nfrom chess_py import Game, Human, color\r\n\r\n# Engine which plays the move with the highest immediate material advantage\r\nclass My_engine(chess_py.Player):\r\n    def __init__(self, color):\r\n    \r\n      # Creates piece value scheme to specify value of each piece.\r\n      self.piece_values = chess_py.Piece_values.init_manual(PAWN_VALUE=1,\r\n                                                            KNIGHT_VALUE=3,\r\n                                                            BISHOP_VALUE=3,\r\n                                                            ROOK_VALUE=5,\r\n                                                            QUEEN_VALUE=9)\r\n      \r\n      # Super call makes color a global\r\n      super(Human, self).__init__(input_color)\r\n    \r\n    def generate_move(self, position):\r\n      # position parameter is an object of type Board\r\n        \r\n      # Finds all possible moves I can play.\r\n      moves = position.all_possible_moves(self.color)\r\n      \r\n      # Initalizes best move and advantage after it has been played to dummy values.\r\n      best_move = None\r\n      best_move_advantage = -99\r\n      \r\n      # Loops through possible moves\r\n      for move in move:\r\n        \"\"\" advantage_as_result(move, piece_values) finds numerical advantage\r\n        as specified by piece value scheme above. Returns negative values for\r\n        positions of disadvantage. Returns +/-99 for checkmate. \"\"\"\r\n        advantage = position.advantage_as_result(move, self.piece_values)\r\n        \r\n        # If this move is better than best move, it is the best move.\r\n        if advantage >= best_move_advantage:\r\n            best_move = move\r\n            best_move_advantage = advantage\r\n      \r\n      return move\r\n\r\n# If file is run as script, a Game is set up between My_engine and Human and result is printed.\r\nif __name__ == \"__main__\":\r\n    new_game = Game(My_engine(color.white), Human(color.black))\r\n    \r\n    # white wins - 0, black wins - 1, draw - 0.5 \r\n    print(\"Result: \", new_game.play())\r\n```\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}